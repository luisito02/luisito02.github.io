---
title: "HW 2"
author: "SDS322E"
date: "`r format(Sys.Date(), '%B %d, %Y')`"
output:
  html_document:
    toc: true
    toc_float:
      collapsed: false
---

```{r global_options, include=FALSE}
#DO NOT EDIT THIS CHUNK OR ANYTHING ABOVE IT!
knitr::opts_chunk$set(echo = TRUE, eval = TRUE, fig.align = "center", warning = F, message = F, tidy=T, tidy.opts=list(width.cutoff=50))
```

## Luis Baez lb36634

**Please submit as an HTML file on Canvas before the due date**

*For all questions, include the R commands/functions that you used to find your answer. Answers without supporting code will not receive credit.*

> #### Review of how to submit this assignment
>All homework assignments will be completed using R Markdown. These `.Rmd` files consist of >text/syntax (formatted using Markdown) alongside embedded R code. 
>When you have completed the assignment (by adding R code inside codeblocks and supporting text outside of the codeblocks), create your document as follows:

> - Click the arrow next to the "Knit" button (above) 
> - Choose "Knit to HTML"
> - Go to Files pane and put checkmark next to the correct HTML file
> - Click on the blue gear icon ("More") and click Export
> - Download the file and then upload to Canvas

---

### Question 1: (2 pts)

##### Type the word *letters* into the R console (or run it in the chunk below) and note what it contains. It is a predefined object in R. What is this object's data type/class? How many elements does it contain? *Include commands used to answer both questions below for credit.*

```{R}
letters

# your code here

typeof(letters)

length(letters)

```

*Your answer here, 1-2 sentences.*

## The class is Character, and there are 26 elements, just like the alphabet

---

### Question 2 (2 pts)

##### Now, say we want to encode your name (or any other message) using a cipher. We want to replace every letter of a given character vector with the letter of the alphabet that is `k` positions after it in the alphabet. For example, if the letter was `a` and `k=3`, we would replace it with `d`; we want it to loop around, so if the letter was `z` we'd replace it with `c`. Thus, with `k=3`, the word `dog` would become `grj`. You'll need a few tools to accomplish this. First, recall that `A %in% B` tests each element of A to see whether it appears in B. 

##### Try running the code below.

```{R}
letters %in% c("t", "e", "s", "t")
```

##### **Using base R commands** (i.e., not just counting manually), how many elements are FALSE in the resulting logical vector? *For credit, include code/commands you used to answer this question below*

```{R}
# your code here
lettersTest = letters %in% c("t", "e", "s", "t")

counter = 0

i =1

for (i in 1:length(letters)) {
  if (lettersTest[i] == FALSE) {
    counter = counter + 1
  }
}

counter

```

*Your answer here, 1-2 sentences.*

## I ran a for loop running for the length of the alphabet and also ran a counter that counted how many falses, using a T/F statement. 

### Question 3: (2 pts)

##### Another thing that will be useful here is `which()`, a handy function that takes a logical vector argument and returns the indices/positions that are TRUE. For example, run

```{R}
which(c(F, T, F, T, F, T)) 
# note that in R, T is shorthand for TRUE, F for FALSE
# note too that you don't use " marks here since you want a logical (not character) vector
```


##### It should tell you that elements in position 2, 4, and 6 are true. Now, use the `which` function, along with `%in%` and `letters` (from the previous question), to find which positions in the alphabet the letters in the name "simone" occupy (saved as an object called name below). *For credit, include code/commands you used to answer this question below*



# your code here
```{R}

name <- c("s","i","m","o","n","e")

# your code here

which(c(letters %in% name))

cipher <- which(letters %in% name)

```


### Question 4: (2 pts)

##### Save your indices from the previous question (the numeric vector resulting from `which()` containing the positions in the alphabet occupied by the letters  s, i, m, o, n, and e) and shift them forward one position by adding 1. Then use those indices to index the letters vector to grab the encoded name! *For credit, include code/commands you used to answer this question below*

##### For example, after using `which()` and `%in%`, the name "ali" would give you the indices `c(1,9,12)`, and if you add 1 you get shifted indices `c(2, 10, 13)`. Then you can get the encoded name by grabbing the letters in those positions: `letters[c(2, 10, 13)]`


```{R}
# your code here

cipherPlus <- c(cipher) + 1

letters[c(cipherPlus)]

```


### Question 5: (2 pts)

##### Cool, it works! Or does it? Be careful! Take what you got after encoding the name `simone` and try **decoding** it. That is, convert the encoded letters to their alphabetical indices/positions, subtract 1 from those positions, and then grab the letters in those downshifted positions. What do you get? Why is this happening? *For credit, include code/commands you used to answer these questions below*

```{R}
# your code here

cipherMinus <- cipherPlus - 1

letters[cipherMinus]

```

*Your answer goes here. 1-2 sentences only.*

## I created variables that keep the "Cipher Words" and stored them, and then just added 1 or took away 1 from the variable and then used the function letters to see what letters. But it now seems like they are disorganized and out of place.

### Question 6: (2 pts)

##### How can we avoid this? We can test each letter one at a time in their correct order! One approach would be to use a for loop. Write a for loop that goes through each element of the character vector `name` (containing the letters of the name "simone") one at a time, finds its position in the alphabet, and saves each position in a vector called `positions`. Confirm that the positions are correct by using `positions` to index `letters`. Then, shift the positions up by k=1 and index `letters` with it to give the new, correctly encoded name.

```{R}
# your code here

name = cipher
k = 1

positions <- c()

for (i in 1:length(name)) {
  positions[i] = which(letters %in% name[i]) + k
}



```

### Question 7 (2 pts)

##### Instead of writing nested commands like `which(letters %in% ...` let's create a function of our own instead!

##### Define a function that takes a word (i.e., a character vector whose elements contain single letters) as the argument and returns the alphabetical positions those letters occupy. Call the function `get_pos`. Once you have defined it, test it out by uncommenting and running the last two lines of the chunk.

```{R}
#your code here

get_pos <- function(word){
  which(letters %in% word)
}

get_pos(name)

#get_pos(name2)
```


### Question 8 (2 pts)

##### You could use this `get_pos` function in your for loop above, but now that we have a function defined, we can easily vectorize instead! Let's use `sapply`. Recall that the first argument to `sapply` is the vector (whose elements we want to apply the function to), and the second argument is the function (to be applied to each element of the vector). Using `sapply`, take the vector called `name`  (whose elements contain the letters of the name "simone") and apply the `get_pos` function to them. Confirm your answer matches what you got using the for loop above.

```{R}
# your code here

sapply(name, get_pos)


```

### Question 9 (2 pts)

##### What happens when we index past `z`, the 26th and final letter of the alphabet? It should loop around, so `z` shifted up 1 becomes `a`. Take the name `zoe`, for example. Shifting up by k=1 should give `apf`, but since there is no 27th element of letters, it will return NA. Try it!

##### How can we make it so that 27 becomes 1, 28 becomes 2 , 29 becomes 3, etc? Fortunately, there is a function that tells you the remainder when you divide one number by another (the modulo operator). In R, we do this with %% (two percent signs). Try running the code below, `27 %% 26` (pronounced "27 mod 26") below. It returns 1, the remainder when the lefthand number (27) is divided by the right (26)

```{R}
27 %% 26 # "twenty-seven divided by twenty-six has a remainder of 1"
```

##### So we just need our shifted positions mod 26. You can do with with `(positions + k) %% 26`. One last minor issue: `26 %% 26` is 0 but we want it to return 26. There are a few fixes: One way is to test if `positions + k` is less than 27: if it is, use `positions + k` for the encoded positions, otherwise use `positions + k %% 26`. Another fix is to replace any 0 in the shifted vector with 26. Find some method you like to fix this issue.

##### Then, put it all together: Take the word `confidential`, save it in a character vector, and use the above techniques to encode the word by shifting every letter K=12 positions forward correctly.

```{R}
# your code here

wordTest = c("C","O","N","F","I","D","E","N","T","I","A","L")

for (i in 1:length(wordTest)) {
  if ((letters %in% positions[i] + k) < 27){
  positions[i] = which(letters %in% wordTest[i]) + k
} else {
  positions[i] + k %% 26
}
  ##positions[i] = which(letters %in% name[i]) + k
}

```


### Question 10 (2 pts)

##### Nice work! One final objective: Write a function that incorporates all the work you have done to achieve this taks. Name the function `cipher`. This function should take two arguments: the first, the word (character vector to be encoded); the second, how many positions to shift (k). You've been given the shell of the function below: You only need to fill it in with the code you've been using above (you'll need either a for loop or sapply). ##### Test your code before you submit. After you define your function, when you run `cipher(c("z","o","e"), 3)` it should output `"c" "r" "h"`


```{R}
cipher <- function(word, k){
#your code here
  
  
  
}
```



```{R, echo=F}
## DO NOT DELETE OR MODIFY THIS CHUNK: IT MUST BE PRESENT TO RECEIVE CREDIT FOR THE ASSIGNMENT
sessionInfo(); Sys.time(); Sys.info()
```
